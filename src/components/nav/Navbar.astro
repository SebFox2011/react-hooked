---
import NavItem from "@/components/nav/NavItem.astro";
import type { Hook } from "@/types/hook";
import { cn } from "@/utils/cn";

interface Props {
  hooks: Hook[];
  selectedPage: string;
}

const { hooks, selectedPage } = Astro.props;

interface DocsPage {
  title: string;
  href: string;
  id: string;
}

const docsPages: DocsPage[] = [
  { title: "Getting started", href: "/docs", id: "docs" },
  { title: "Testing", href: "/docs/tests", id: "testing" },
];
---

<nav
  id="nav-list"
  class="sticky top-16 hidden max-h-[calc(100dvh-theme(spacing.16))] w-64 shrink-0 overflow-y-auto pb-16 pt-12 lg:block"
>
  <ul role="list">
    {
      docsPages.map((page) => (
        <li>
          <a
            class={cn(
              "flex items-center gap-x-3 py-1.5 font-medium hover:underline",
              selectedPage === page.id && "text-ctp-blue",
            )}
            href={page.href}
          >
            {page.title}
          </a>
        </li>
      ))
    }
    <li class="mt-6">
      <div class="text-lg font-semibold">Hooks</div>
      <ul role="list" class="mt-4">
        {
          hooks.map((hook: Hook) => (
            <NavItem
              text={hook.name}
              href={`/docs/${hook.name}`}
              isSelected={hook.name === selectedPage}
              isTested={hook.isTested}
            />
          ))
        }
      </ul>
    </li>
  </ul>
</nav>

<script>
  document.addEventListener("astro:before-swap", () => {
    const navList = document.getElementById("nav-list");
    if (navList) {
      sessionStorage.setItem("scrollPosition", navList.scrollTop.toString());
    }
  });

  document.addEventListener("astro:after-swap", () => {
    const scrollPosition = sessionStorage.getItem("scrollPosition");
    const navList = document.getElementById("nav-list");
    if (scrollPosition && navList) {
      navList.scrollTo({
        top: parseInt(scrollPosition, 10),
        behavior: "instant",
      });
      sessionStorage.removeItem("scrollPosition");
    }
  });
</script>
